(*
 * This source is part of Percepio -- the build system inspector
 *
 * Copyright (C) 2009 Alan Falloon <alan.falloon@gmail.com>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *)

(** Percepio_parser is the module that translates the stream of system
    events generated by strace(1) and turns it into the tree of
    processes, what files they accessed, and other useful stuff.

    When it finishes it serializes this information out so that it can
    be usefully sliced and diced by other scripts.

*)

open Genlex ;;
open Printf ;;

(** This makes a stream of characters from an input stream. However,
    because Genlex doesn't let us know about newlines, they are
    translated into semicolons. This can be done naively because
    newlines in string constants etc. are escaped by strace.

*)
let translated_char_stream in_chan =
  let f _ =
    try
      begin
        match input_char in_chan with
            '\n' -> Some ';'
          | c ->  Some c
      end
    with End_of_file -> None
  in
  Stream.from f
;;

(** The lexer *)
let lexer =
  make_lexer
    [ ";"
    ; "(" ; ")"
    ; "[" ; "]" ; "~["
    ; "{" ; "}"
    ; "."
    ; ","
    ; "|" ; "&"
    ; "="
    ; "?"
    ]
;;

(** A debug printer for the Genlex tokens *)
let print_token = function
    Kwd ";"  -> printf "\n"
  | Kwd s    -> printf "(K %s)" s
  | Ident s  -> printf "(I %s)" s
  | Int i    -> printf "(N %d)" i
  | Float f  -> printf "(F %f)" f
  | String s -> printf "(S %S)" s
  | Char c   -> printf "(C %C)" c
;;

let () =
  let chr_stream = translated_char_stream stdin in
  let tok_stream = lexer chr_stream in
  Stream.iter print_token tok_stream
